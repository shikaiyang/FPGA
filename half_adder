module half_adder(
	input 	wire	int1,
	input		wire	int2,
	output	wire	cout,	//进位
	output	wire	sum 	//输出
	);
	
	/* + - * / % 为算术运算符，又称为二进制运算符
		本语句可理解为int1+in2已实现半加器，cout与
		sum将进位和结果拆开输出。
		例，本句int1、int2 皆输入1，则为1+1=10（当需
		要进位时其输出自动增加一位。{cout，sum}组成为
		一个2bit的数组，其等于将int1+int2输出的高位给
		到cout，将低位给到sum。
		又例，int1、int2输入为1和0，其结果为1+0=1。
		又因为{cout，sum}为2bit的数组，int1+int2的输
		出自动补为2bit的数组，及01，将高位给到cout，低
		位给到sum*/
	assign {cout,sum}=int1+int2;//上课版
	/*
	门电路版
	xor (sum ,int1,int2);
	and (cout,int1,int2);
	*/
	
endmodule

	/*	1.算术运算符
		在Verilog HDL语言中，算术运算符又称为二进制运算符，共有下面几种：

			1) + (加法运算符,或正值运算符,如 rega＋regb，＋3)

			2) － (减法运算符，或负值运算符，如 rega－3,－3)

			3) × (乘法运算符，如rega*3)

			4) / (除法运算符，如5/3)

			5) % (模运算符，或称为求余运算符，要求％两侧均为整型数据。如7％3的值为1)

			在进行整数除法运算时，结果值要略去小数部分，只取整数部分。而进行取模运算时，结果值的符号位采用模运算式里第一个操作数的符号位。见下例。

					模运算表达式       结果     说明
					10%3               1       余数为1
					11%3               2       余数为2
					12%3               0       余数为0即无余数
					-10%3             -1       结果取第一个操作数的符号位,所以余数为-1
					11%3               2       结果取第一个操作数的符号位,所以余数为2.
			注意： 在进行算术运算操作时，如果某一个操作数有不确定的值x，则整个结果也为不定值x。
			*/
